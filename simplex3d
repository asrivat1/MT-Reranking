#!/usr/bin/env python
import optparse
import sys
import compute_bleu as cb
import random

THRESHOLD = 0.00001
optparser = optparse.OptionParser()
optparser.add_option("-k", "--kbest-list", dest="input", default="data/dev+test.100best", help="100-best translation lists")
optparser.add_option("-l", "--lm", dest="lm", default=-1.0, type="float", help="Language model weight")
optparser.add_option("-t", "--tm1", dest="tm1", default=-0.5, type="float", help="Translation model p(e|f) weight")
optparser.add_option("-s", "--tm2", dest="tm2", default=-0.5, type="float", help="Lexical translation model p_lex(f|e) weight")
(opts, _) = optparser.parse_args()
weights = {'p(e)'       : float(opts.lm) ,
           'p(e|f)'     : float(opts.tm1),
           'p_lex(f|e)' : float(opts.tm2)}

def four_random():
    thetas = []
    for i in range(0,4):
        theta = {}
        for key in weights.keys():
            theta[key] = - random.random()
        thetas.append(theta)
    return thetas

def midpoint(theta1, theta2, theta3):
    mid = {}
    for key in theta1.keys():
        mid[key] = (theta1[key] + theta2[key] + theta3[key]) / 3.0
    return mid

def midpoint2d(theta1, theta2):
    mid = {}
    for key in theta1.keys():
        mid[key] = (theta1[key] + theta2[key]) / 2.0
    return mid

def add(theta1, theta2):
    added = {}
    for key in theta1.keys():
        added[key] = theta1[key] + theta2[key]
    return added

def subtract(theta1, theta2):
    subtracted = {}
    for key in theta1.keys():
        subtracted[key] = theta1[key] - theta2[key]
    return subtracted

def shrink(thetas):
    # find the midpoint between good and best
    m1 = midpoint2d(thetas[0], thetas[1])
    # find the midpoint between good and best, again
    m2 = midpoint2d(thetas[0], thetas[2])
    # find the midpoint between worst and best
    s = midpoint2d(thetas[0],thetas[3])

    print "**SHRINK**"
    return [thetas[0], m1, m2, s]

def refine(thetas):
    m = midpoint(thetas[2], thetas[1], thetas[0])
    c1 = add(m, {k: v / 2.0 for k,v in subtract(m, thetas[3]).iteritems()})
    c2 = add(m, {k: v * 1.5 for k,v in subtract(m, thetas[3]).iteritems()})

    c1_err = bleu_score(c1)
    c2_err = bleu_score(c2)
    worst_err = bleu_score(thetas[2])

    if c1_err < worst_err and c1_err < c2_err:
        print "**REFINE: IN**"
        thetas[3] = c1
        return thetas
    elif c2_err < worst_err and c2_err < c1_err:
        print "**REFINE: OUT**"
        thetas[3] = c2
        return thetas
    else:
        return shrink(thetas)

def reflect(thetas):
    m = midpoint(thetas[2], thetas[1], thetas[0])
    r = add(m, subtract(m, thetas[3]))
    e = add(m, add(subtract(m, thetas[3]), subtract(m, thetas[3])))

    m_err = bleu_score(m)
    r_err = bleu_score(r)
    e_err = bleu_score(e)
    worst_err = bleu_score(thetas[3])

    if e_err < r_err < worst_err:
        print "**REFLECT: E**"
        thetas[3] = e
        return thetas
    elif r_err < worst_err:
        print "**REFLECT: R**"
        thetas[3] = r
        return thetas
    else:
        return refine(thetas)

def bleu_score(theta):
  return cb.compute_bleu(theta, opts.input)
  
def simplex():
    thetas = four_random()
    thetas = sorted(thetas,key = lambda x: bleu_score(x),reverse=True)
    i = 0
    worst_score = bleu_score(thetas[3])
    best_score = bleu_score(thetas[0])
    while abs(worst_score - best_score) > THRESHOLD:
        i += 1
        print i
        print "Absolute Value: " + str(abs(worst_score - best_score))
        thetas = reflect(thetas)
        print "Before: " + str(thetas)
        thetas = sorted(thetas,key = lambda x: bleu_score(x),reverse=True)
        print "\nAfter: " + str(thetas)
        best_score = bleu_score(thetas[0])
        worst_score = bleu_score(thetas[3])
        print "Bleu Score: " + str(best_score)
    return thetas

def main():
    weights = simplex()
    print bleu_score(weights[0])

if __name__ == "__main__":
    main()
