#!/usr/bin/env python
import optparse
import sys
import compute-bleu as cb
import random

THRESHOLD = 0.001
optparser = optparse.OptionParser()
optparser.add_option("-k", "--kbest-list", dest="input", default="data/dev+test.100best", help="100-best translation lists")
optparser.add_option("-l", "--lm", dest="lm", default=-1.0, type="float", help="Language model weight")
optparser.add_option("-t", "--tm1", dest="tm1", default=-0.5, type="float", help="Translation model p(e|f) weight")
optparser.add_option("-s", "--tm2", dest="tm2", default=-0.5, type="float", help="Lexical translation model p_lex(f|e) weight")
(opts, _) = optparser.parse_args()
weights = {'p(e)'       : float(opts.lm) ,
           'p(e|f)'     : float(opts.tm1),
           'p_lex(f|e)' : float(opts.tm2)}

def three_random():
    thetas = []
    for i in range(0,3):
        theta = {}
        for key in weights.keys():
            theta[key] = - random.random()
    return thetas

def bleu_score(theta):
  return cb.compute_bleu(t)
  
def simplex():
  old_score = 0.0
  thetas = self.three_random()
  thetas = sorted(thetas,lamda x: bleu_score(x),reverse=True)
  best_score = thetas[0]
  while abs(old_score - best_score) > THRESHOLD:
    old_score = best_score
    thetas = self.reflect(thetas)
    thetas = sorted(thetas,lamda x: bleu_score(x),reverse=True)
    best_score = thetas[0]
  return thetas






